""" Module with functionalities to compare attribute values as well as
    record pairs. The record pair comparison function will return a dictionary
    of the compared pairs consisting of a list with similarity values.
"""


def compare_blocks(blockA_dict, blockB_dict, recA_dict, recB_dict,
                  attr_comp_list):
    """
    Build a similarity dictionary with pairs of records from the two given
    block dictionaries. Candidate pairs are generated by pairing each record
    in a given block from dataset A with all the records in the same block
    from dataset B.

    For each candidate pair, a similarity vector is computed by comparing
    attribute values using the specified similarity method.


    Example: sim_vec_dict = {
        (recA1, recB1): [1.0, 0.0, 0.5, ...],
        (recA1, recB5): [0.9, 0.4, 1.0, ...],
        ...
    }


    Parameters
    ----------
      blockA_dict    :
          Dictionary of blocks from dataset A
      blockB_dict    :
          Dictionary of blocks from dataset B
      recA_dict      :
         Dictionary of records from dataset A
      recB_dict      :
         Dictionary of records from dataset B
      attr_comp_list :
                       List of comparison methods for comparing individual
                       attribute values. This needs to be a list of tuples
                       where each tuple contains: (comparison function,
                       attribute number in record A, attribute number in
                       record B).
    Returns
    -----------
     sim_dict : dictionary of record pairs
        dictionary of record pairs with a list of similarities as value


    """
    print('Compare %d blocks from dataset A with %d blocks from dataset B' % \
          (len(blockA_dict), len(blockB_dict)))

    sim_vec_dict = {}  # A dictionary where keys are record pairs and values
    # lists of similarity values

    # Iterate through each block in block dictionary from dataset A
    #
    for (block_bkv, rec_idA_list) in blockA_dict.items():

        # Check if the same blocking key occurs also for dataset B
        #
        if (block_bkv in blockB_dict):

            # If so get the record identifier list from dataset B
            #
            rec_idB_list = blockB_dict[block_bkv]

            # Compare each record in rec_id_listA with each record from rec_id_listB
            #
            for rec_idA in rec_idA_list:

                recA = recA_dict[rec_idA]  # Get the actual record A

                for rec_idB in rec_idB_list:
                    recB = recB_dict[rec_idB]  # Get the actual record B

                    # generate the similarity vector
                    #
                    sim_vec = compare_record(recA, recB, attr_comp_list)

                    # Add the similarity vector of the compared pair to the similarity
                    # vector dictionary
                    #
                    sim_vec_dict[(rec_idA, rec_idB)] = sim_vec

    print('  Compared %d record pairs' % (len(sim_vec_dict)))
    print('')

    return sim_vec_dict


# -----------------------------------------------------------------------------

def compare_record(recA, recB, attr_comp_list):
    """This method generates the similarity vector for the given record pair by comparing
     attribute values according to the comparison function and attribute
     numbers in the given attribute comparison list.

     Parameters
     --------------
       recA :
            list of values from the first record
       recB :
             list of values from the second record
       attr_comp_list :
                        list of tuples where each tuple
                        contains the similarity function, index of the attribute in
                        recA, index of the attribute in recB).
      :returns similarity vector consisting of the calculated similarities

  """

    sim_vec = []

    # Calculate a similarity for each attribute to be compared
    #
    for (comp_funct, attr_numA, attr_numB) in attr_comp_list:

        if (attr_numA >= len(recA)):  # Check there is a value for this attribute
            valA = ''
        else:
            valA = recA[attr_numA]

        if (attr_numB >= len(recB)):
            valB = ''
        else:
            valB = recB[attr_numB]
        sim = comp_funct(valA, valB)
        sim_vec.append(sim)

    return sim_vec


# -----------------------------------------------------------------------------


# End of program.
